package ru.vlad.lessonmaven;

public class CyclesAndArrays {

    public static void forWithCount() {
        /**
         * for ( код_перед_началом_цикла; условие_работы_цикла; действие_после_итерации) {блок_кода_цикла}
         *
         * int i - создаем переменную в области действия цикла
         *
         * i = 0 - задаём начальное значение переменной
         *
         * i < 10 - задаём условие для работы цикла (boolean)
         *
         * i++ - задаем действие после каждой итерации цикла (на самом деле здесь может быть
         *      абсолютно любой код)
         *
         * { System.out.println(i); } - блок кода цикла
         */
        for (int i = 0; i < 10; i++) {
            System.out.println(i);
        }

        System.out.println("end forCycle");
    }

    public static void whileWithCount() {

        boolean b = true;
        int i = 0;

        /**
         * while - цикл действует, пока условие в круглых скобках положительно
         */
        while (b) {
            if (i < 10) {
                i++;
                System.out.println("i = " + i);
            } else {
                b = false;
                System.out.println("b стал false");
            }
        }
        System.out.println("end whileCount");
    }

    public static void doWhile() {

        /**
         * do while - то же самое, что и цикл while, только выполнение блока кода идёт перед
         *      проверкой условия работы цикла
         */

        // заведомо сделаем ложное условие, чтобы увидеть действие блока кода до проверки
        boolean b = false;

        do {
            System.out.println();
        } while (b);

        System.out.println("end doWile");
    }

    public static void createArray() {

        /**
         * Массив - место, в котором хранится ОПРЕДЕЛЁННОЕ количество однотипных данных.
         *      Это значит, что у массива нельзя изменить размер. Если созданный массив может хранить
         *      десять значений, то сделать его больше мы никак не можем. Обойти данное ограничение
         *      позволит только создание другого массива с бОльшим размером и копирование в него
         *      данных из старого массива.
         *
         * Ниже я покажу способы создания массива
         */

        // Есть два способа объявления переменной с типом "массив"
        // Можно поставить квадратные скобки либо после описания типа хранимых данных (int[]),
        int[] array1;

        // либо после самого названия переменной.
        int array2[];

        // Лично я предпочитаю первый вариант, так как указание массива отчасти является
        //      указанием типа переменной =)

        // Далее, собственно, само создание массива. Тут также имеется пара способов, но уже с
        //      существенными отличиями.
        // Первый способ - это создание массива по-умолчанию с указанием ключевого слова "new",
        //      типа хранимых данных, а таже длины.
        array1 = new int[5];

        // Такой массив не пустой. В зависимости от типа хранимых данных, в его ячейках задаются
        //      определённые значения. В данном случае, у нас хранятся числа, поэтому по-умолчанию
        //      все числа в массиве равны нулю.

        // Второй способ с указанием хранимых данных в фигурных скобках.
        array1 = new int[]{5, -823, 32, 234234, 443, -234};

        // В данном варианте мы уже можем не указывать длину массива в квадратных скобках,
        //      так как она нам известна из предоставленных данных в фигурных
        //      скобках (в примере имеются шесть чисел, а значит длина массива равна шести).

    }

    public static void outArray() {

        /**
         * В данном методе я напомню, как использовать элементы массива, задавать их, а также, как
         * пройтись по всем элементам через цикл
         */

        // Создадим новый массив чисел длиной 5 элементов
        int[] array = new int[]{356, 88, -123, -345345, 25};

        // Создам переменную, в которую помещу один из элементов массива.
        int arrNum;

        // Допустим, я хочу использовать число "-123". Оно третье по порядку. Однако,
        //      индексы элементов начинаются с нуля. Поэтому, первый элемент будет под индексом 0,
        //      второй под индексом 1, и третий под индексом 2.
        // Чтобы использовать элемент массива, я должен написать название переменной массива
        //      (в данном случае это "array") и в квадратных скобках индекс элемента.
        arrNum = array[2];

        // Теперь в переменной "arrNum" храниться число -123
        System.out.println("arrNum = " + arrNum);
        System.out.println("array[2] = " + array[2]);

        // Теперь поместим какое-нибудь число в ячейку массива. Для этого надо, как и раньше,
        //      указать на ячейку пассива и, через оператор присваиваний (=) задать новое значение
        array[4] = 0;
        // Таким образом, мы присвоили пятому элементу массива число нуль

        // Длину массива можно не запоминать. Её тоже можно получить из массива, путём
        //      указания через точку параметра "length" (длина)
        int arrayLength = array.length;

        // Используя данный метод, можно работать со всеми элементами в массиве через счётчик в цикле
        // Зададим счётчику начальное значение в виде индекса первого элемента массива
        // условие - до длины массива, не включая её (так как под таким индексом в массиве нет элемента)
        for(int i = 0; i < array.length; i++) {
            System.out.println("array[" + i + "] = " + array[i]);
        }

    }

}
